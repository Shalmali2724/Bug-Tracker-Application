package com.bugtracker.projectmngmodule.controller;

import java.util.List;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;


import com.bugtracker.projectmngmodule.dto.ProjectDto;
import com.bugtracker.projectmngmodule.entity.Project;
import com.bugtracker.projectmngmodule.service.ProjectService;


@RestController
@RequestMapping("/proj")
public class ProjectController {
	@Autowired
	private ProjectService projectService;
    
   
    
    @PostMapping("/project/save")
    public ResponseEntity<ProjectDto> addProject(@Valid @RequestBody ProjectDto projectDto) {
        ProjectDto savedProject = projectService.addProject(projectDto);
        ResponseEntity<ProjectDto> responseEntity = new ResponseEntity<>(savedProject, HttpStatus.CREATED);
		return responseEntity;
        
       
    }
    @DeleteMapping("/project/deleteByProjectId/{projectId}")
    public ResponseEntity<String> deleteProject(@PathVariable("projectId") long projectId){
    	String response = projectService.deleteProjectById(projectId);
    	ResponseEntity<String> responseEntity = new ResponseEntity<>(response,HttpStatus.OK);
		return responseEntity;
    	
    }
    @PutMapping("/project/update")
    public ResponseEntity<Project>modifyProject(@RequestBody Project project) {
		Project updatedProject = projectService.updateProject(project);
		ResponseEntity<Project> responseEntity = new ResponseEntity<>(updatedProject, HttpStatus.OK);
		return responseEntity;

	}
    @GetMapping("/project/{projectid}")
	public ResponseEntity<Project> fetchProjectDetails(@PathVariable("id") long projectId) {
		Project project = projectService.getProjectById(projectId);
		ResponseEntity<Project> responseEntity = new ResponseEntity<>(project, HttpStatus.OK);
		return responseEntity;
	}
    
    @GetMapping("/project/all")
	public List<Project> fetchAllProjects() {
		List<Project> list = projectService.getAllProject();
		return list;
	}
    
	
	

}
